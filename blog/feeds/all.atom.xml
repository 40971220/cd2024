<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40971220協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-05-22T06:21:40+08:00</updated><entry><title>W13</title><link href="./2024-Spring-40971220-w13-blog-tutorial.html" rel="alternate"></link><published>2024-05-16T11:00:00+08:00</published><updated>2024-05-22T06:21:40+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-05-16:./2024-Spring-40971220-w13-blog-tutorial.html</id><content type="html">&lt;p&gt;1.個人 &lt;a href="https://github.com/40971220/cd2024"&gt;cd2024&lt;/a&gt; 與分組倉儲的建立及維護.&lt;/p&gt;
&lt;p&gt;2.各分組註冊一個 Odoo 帳號, 選用免費的 PLM 模組, 取得各分組的產品生命週期管理系統網域, 並將參考論文的協同翻譯流程作為工作項目, 在各分組的 PLM 網域系統中留下任務分配與紀錄, 最終產出為一份參考論文的中英文翻譯並列 pdf 檔案, 其中包含各組員的心得報告.&lt;/p&gt;
&lt;p&gt;3.指定在參考論文的翻譯與閱讀過程, 將&lt;a href="https://github.com/mdecd2024/2b-midbg6"&gt;各組員的 cd2024 課程倉儲納為分組倉儲的子模組&lt;/a&gt;, 可以將各組員倉儲中的 LaTeX 原始資料, 整合至分組倉儲中, 採 Github Actions 或近端使用 MikTeX 建立分組的參考論文閱讀報告 pdf 檔案.&lt;/p&gt;
&lt;p&gt;4.要求各分組採協同方式, 在&lt;a href="https://www.youtube.com/watch?v=boyHCAmWpKs&amp;amp;ab_channel=%E5%82%85%E6%9F%8F%E7%9A%93"&gt;各教學影片&lt;/a&gt;上填上字幕並嵌入個人網站, 分工整理影片&lt;a href="https://1drv.ms/u/s!Agzcw-HLEDelhCyV8zcdzTpUksgY?e=YxbQm5"&gt;逐字稿1&lt;/a&gt; &lt;a href="https://1drv.ms/u/s!Agzcw-HLEDelhC0L3FaifN1QW0DE?e=n5FosY"&gt;逐字稿2&lt;/a&gt;與教學重點, 最後完成&lt;a href="https://youtu.be/1PXMiVm13Lg"&gt;期中自評&lt;/a&gt;, 在期中考週將自評成績送至教務處.&lt;/p&gt;
&lt;p&gt;5.要求下載 Siemens NX 1872 至個人隨身碟或電腦 (含筆電), 後續專案系統的零組件繪圖可採電腦輔助設計室固態硬碟所安裝的 NX1872 或隨身碟中的可攜系統, 必須透過連網取得認證後才能開啟.&lt;/p&gt;
&lt;p&gt;6.提醒 CoppeliaSim 不同版本中存檔上的差異, 並強調 cd2024 將沿用 cad2023 課程中所使用的 4.5.1 版.&lt;/p&gt;
&lt;p&gt;7.提示 各分組可以利用可攜式 Sourcetree 套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題.&lt;/p&gt;
&lt;p&gt;8.在第七週摘要出 cd2024 各項分組協同模式的要點及執行方法.&lt;/p&gt;
&lt;p&gt;9.在第八週說明如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟.&lt;/p&gt;
&lt;p&gt;10.第十週起, 要求學員完成三項實習任務. (建立倉儲與網站連結、PID 控制文獻整理、NX 平台零組件繪圖)&lt;/p&gt;
&lt;p&gt;11.第十二週的三項實習任務 (NXOpen 零組件繪製、分組倉儲設為評分倉儲子模組、足球機器人場景模擬).
&lt;a href="https://1drv.ms/u/s!Agzcw-HLEDelhC75dnccXM5M1AQy?e=xjI5wW"&gt;零組件python程式碼&lt;/a&gt;&lt;/p&gt;
</content><category term="w13"></category><category term="協同產品設計實習評分項目."></category></entry><entry><title>W12</title><link href="./2024-Spring-40971220-w12-blog-tutorial.html" rel="alternate"></link><published>2024-05-09T11:00:00+08:00</published><updated>2024-05-09T08:33:14+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-05-09:./2024-Spring-40971220-w12-blog-tutorial.html</id><content type="html">&lt;p&gt;將鋼球平衡台零組件使用NX錄製python程式碼
&lt;a href="https://1drv.ms/u/s!Agzcw-HLEDelhC75dnccXM5M1AQy?e=xjI5wW"&gt;零組件python程式碼&lt;/a&gt;
W12任務一心得:使用NX進行python程式錄製的時候常常遇到錄完後打不開的問題，反覆嘗試幾次之後就可以了。&lt;/p&gt;
</content><category term="w12"></category><category term="上課心得"></category></entry><entry><title>W11</title><link href="./2024-Spring-40971220-w11-blog-tutorial.html" rel="alternate"></link><published>2024-05-02T11:00:00+08:00</published><updated>2024-05-07T06:29:12+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-05-02:./2024-Spring-40971220-w11-blog-tutorial.html</id><content type="html">&lt;p&gt;在老師的評分網站上上傳自己的上課心得
學習使用Python程式來建立NX零件&lt;/p&gt;
</content><category term="w11"></category><category term="上課心得"></category></entry><entry><title>W10</title><link href="./2024-Spring-40971220-w10-blog-tutorial.html" rel="alternate"></link><published>2024-04-25T11:00:00+08:00</published><updated>2024-05-22T06:18:30+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-04-25:./2024-Spring-40971220-w10-blog-tutorial.html</id><content type="html">&lt;p&gt;實習任務一
建立各班學員的倉儲、網站與分組連結&lt;/p&gt;
&lt;p&gt;實習任務二
請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中.&lt;/p&gt;
&lt;p&gt;論文一:Construction and theoretical study
以下是對文章"Construction and theoretical study of a ball balancing platform"的大概內容及總結：
簡介
介紹文章主題：建構和理論研究一個球平衡平台。
解釋研究動機：探索如何建構一個能夠平衡球體並保持穩定的平台，並對其進行理論研究。
平台結構設計
詳細描述球平衡平台的結構和設計原理。
包括平台底部的馬達或伺服器、球體的固定機制、感測器等。
控制系統
解釋平台上的控制系統，包括控制算法和相關硬體。
可能採用的控制策略，如PID控制、模型預測控制等。
理論研究
探討球平衡平台的理論基礎，可能包括動力學模型和控制理論。
分析平台設計和控制系統的穩定性和性能。
實驗結果
展示實驗室或實地測試的結果。
包括平台的平衡能力、響應速度和準確性等。
討論
分析實驗結果，討論平台設計和控制系統的優缺點。
探討未來改進和擴展的可能性。
結論
總結研究的主要結果和發現。
強調平台的實用價值和對相關領域的貢獻。
總結：
這篇文章介紹了一個球平衡平台的建構和理論研究。通過理論分析和實驗驗證，證明了該平台的穩定性和控制性能。該研究對於理解和應用控制理論在實際系統中的作用具有重要意義。未來的研究可以進一步優化平台設計和控制算法，以應對更廣泛的應用需求。&lt;/p&gt;
&lt;p&gt;論文二:A real time control system for balancing a ball on a platform with FPGA parallel implementation
簡介
介紹文章主題：一個用於平衡平台上的球的實時控制系統，並使用FPGA進行平行實現。
提出研究動機：開發一個高效、實時的控制系統來實現球在平台上的穩定平衡，並利用FPGA技術來加速實現過程。
平台結構設計
詳細描述平衡平台的結構、球的固定方式和感測器配置。
解釋平衡平台的物理特性和控制需求。
控制系統設計
介紹控制系統的設計原理，包括適用於實時應用的控制算法。
討論如何在FPGA上實現控制系統的平行化處理，以提高效率和實時性。
FPGA平行實現
解釋在FPGA上實現控制系統的方法和技術。
詳細描述FPGA架構和相關硬體設計。
實驗結果
展示使用FPGA實現的控制系統的實時平衡效果。
分析實驗結果，包括平台穩定性、控制效率和實時性能。
討論
分析實驗結果，探討控制系統的性能和實現方法的優缺點。
探討未來改進和應用的可能性。
結論
總結研究的主要成果和貢獻。
強調使用FPGA實現實時控制系統的重要性和優勢。
總結：
本文介紹了一個實時控制系統，用於平衡平台上的球，並通過FPGA進行平行實現。通過實驗結果的分析，證明了該控制系統在穩定性和實時性方面的有效性。FPGA平行實現技術提高了系統的效率和性能，使其適用於各種實時應用場景。該研究為基於FPGA的實時控制系統在工業控制和機器人應用中的潛在應用提供了重要參考和啟示。&lt;/p&gt;
&lt;p&gt;論文三:Design and Implementation a Ball Balancing System for Control Theory Course
以下是對文章"Design and Implementation a Ball Balancing System for Control Theory Course"的大概內容及總結：
簡介
介紹文章主題：設計和實現一個球平衡系統，作為控制理論課程的一部分。
提出研究動機：將控制理論的概念應用到實際系統中，通過實作一個球平衡系統來加深學生對控制理論的理解。
系統結構設計
詳細描述球平衡系統的結構和設計原理。
包括平台、球體、感測器和控制器等組件的功能和作用。
控制理論應用
解釋控制理論如何應用於球平衡系統。
探討可能使用的控制算法，如PID控制、線性二次調節（LQR）等。
系統實現
描述如何實現球平衡系統，包括硬體和軟體的設計和實作過程。
可能涉及的技術，如嵌入式系統、控制器設計和程式開發等。
實驗結果與課程教學
展示球平衡系統的實驗結果，包括系統的穩定性和控制性能。
討論如何將這個實驗項目應用到控制理論課程中，並加強學生的理論理解和實踐能力。
學習成果與反思
分析學生從這個實驗項目中所獲得的學習成果和收穫。
反思教學方法和實驗設計的有效性，提出改進建議。
結論
總結實驗項目的目的、過程和結果。
強調這個實驗對學生的教育價值和對控制理論學習的貢獻。
總結：
本文介紹了一個球平衡系統的設計和實現，作為控制理論課程的一部分。通過將控制理論應用到實際系統中，這個實驗項目有助於學生更好地理解和應用所學的理論知識。透過系統實現和實驗結果的分析，學生不僅提高了對控制理論的理解，還培養了解決實際工程問題的能力。該實驗項目為控制理論課程的教學提供了有價值的實踐教學資源，同時也為學生的專業發展和職業生涯做好了準備。&lt;/p&gt;
&lt;p&gt;論文四:Simulation_and_Experimental_Study_of_Ball_Position
以下是對文章"Simulation and Experimental Study of Ball Position"的大概內容及總結的翻譯：
簡介
介紹文章主題：模擬和實驗研究球的位置。
提出研究動機：探索在不同條件下球的位置變化，以及對其進行模擬和實驗研究的重要性。
系統設計
描述球的位置測量系統的設計和構造。
包括傳感器的選擇、布置和校準，以及數據採集和處理方法。
模擬研究
介紹球位置在理論模型下的模擬方法。
分析不同因素對球位置的影響，如重力、摩擦力等。
實驗設計
解釋實驗設置和參數選擇。
討論實驗過程中的數據採集和處理方法。
模擬與實驗結果
展示模擬和實驗結果。
對比分析模擬結果與實驗數據，探討其中的差異和一致性。
結果分析
分析模擬和實驗結果，討論球位置變化的規律和影響因素。
探討實驗結果對現有理論模型的驗證和補充。
結論
總結模擬和實驗研究的主要發現和結果。
強調對球位置變化進行模擬和實驗研究的重要性和意義。
總結：
本文通過模擬和實驗研究了球的位置變化。通過系統設計和數據分析，揭示了球位置在不同條件下的變化規律和影響因素。模擬和實驗結果的對比分析為對球位置變化的理解提供了新的視角和證據。這項研究的結果對於相關領域的理論建模和實踐應用具有重要的參考價值，同時也為未來的研究提供了新的思路和方向。&lt;/p&gt;
&lt;p&gt;論文五:Ball_on_the_plate_balancing_control_system
以下是對文章"Ball_on_the_plate_balancing_control_system"的大概內容及總結的翻譯：
簡介
介紹文章主題：球在平板上的平衡控制系統。
提出研究動機：探索如何設計一種控制系統，使球能夠在平板上保持平衡，並對其進行控制。
系統結構設計
描述球在平板上的平衡控制系統的結構和組成部分。
包括平板、球、感測器、執行器（如馬達或伺服器）、控制器等。
控制算法
介紹控制算法的選擇和設計，以實現球在平板上的平衡。
可能採用的算法包括PID控制、模型預測控制（MPC）、模糊控制等。
系統實現
討論如何將設計的控制算法實現到實際系統中。
包括硬體的選擇和搭建，以及軟體的開發和調試。
實驗與仿真
展示實驗和仿真的結果。
分析不同控制算法在平衡控制系統中的性能和效果。
實用性與應用
探討該平衡控制系統的實際應用場景和可能性。
分析其在工業、機器人、娛樂等領域中的潛在應用價值。
總結
總結該平衡控制系統的設計、實現和應用。
強調其在控制理論和工程實踐中的重要性和價值。
總結：
本文介紹了一種球在平板上的平衡控制系統的設計與實現。通過對控制算法的選擇和系統的實現，實現了對球在平板上的平衡控制。實驗和仿真結果驗證了該系統的可行性和有效性。該平衡控制系統在工業自動化、機器人技術和娛樂等領域具有廣泛的應用前景。這項研究為控制理論和工程實踐提供了新的思路和方法。&lt;/p&gt;
&lt;p&gt;論文六:cd2024_2D Ball Balancer Control using QUARC
簡介
介紹文章的主題：使用QUARC控制2D球平衡器。
提出研究動機：研究如何使用現代控制技術來實現2D球平衡器的穩定控制。
系統架構
描述2D球平衡器系統的結構和組成部分：包括平台、球、感測器、控制器等。
解釋每個部分的功能和作用。
控制算法設計
介紹控制算法的設計方法：可能涉及到PID控制、模型預測控制（MPC）等。
討論如何選擇合適的控制算法以實現穩定的球平衡。
QUARC模擬與實現
描述如何使用QUARC來模擬2D球平衡器系統的行為。
展示在模擬環境中對控制算法進行調整和測試的過程。
實驗結果與分析
展示實驗室或實地測試的結果。
分析不同控制算法的效果，討論穩定性、響應速度等性能指標。
討論
對實驗結果進行討論：可能包括算法的優缺點、改進方向等。
探討實驗結果對於控制理論和工程應用的意義。
結論
對整個研究的總結和歸納。
強調研究的貢獻和意義，以及可能的未來研究方向。
總結：
這篇文章討論了使用QUARC控制2D球平衡器的方法和實驗結果。通過對不同控制算法的比較和實驗結果的分析，我們可以得出結論：某些控制算法在穩定性和響應速度上表現更優，但也存在改進的空間。本研究的結果對於控制理論和工程應用具有重要的參考價值，未來可以進一步優化控制算法，擴展應用範圍，以實現更高效的系統控制。&lt;/p&gt;
&lt;p&gt;實習任務三:鋼球平衡台零組件繪圖
&lt;a href="https://1drv.ms/f/s!Agzcw-HLEDelhC-meWjbDDBhP4iD?e=19SgKV"&gt;組件繪圖&lt;/a&gt;&lt;/p&gt;
</content><category term="w10"></category><category term="期中考"></category></entry><entry><title>W8</title><link href="./2024-Spring-40971220-w8-blog-tutorial.html" rel="alternate"></link><published>2024-04-18T11:00:00+08:00</published><updated>2024-05-09T08:34:04+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-04-18:./2024-Spring-40971220-w8-blog-tutorial.html</id><content type="html">&lt;p&gt;上傳期中影片
&lt;a href="https://youtu.be/1PXMiVm13Lg?si=ghKYghTAPvI8KyqL"&gt;期中影片&lt;/a&gt;&lt;/p&gt;
</content><category term="w8"></category><category term="期中考"></category></entry><entry><title>W7</title><link href="./2024-Spring-40971220-w7-blog-tutorial.html" rel="alternate"></link><published>2024-04-04T11:00:00+08:00</published><updated>2024-04-18T06:00:47+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-04-04:./2024-Spring-40971220-w7-blog-tutorial.html</id><content type="html">&lt;p&gt;清明連假&lt;/p&gt;
</content><category term="w7"></category><category term="連假"></category></entry><entry><title>W6</title><link href="./2024-Spring-40971220-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-03-28:./2024-Spring-40971220-w6-blog-tutorial.html</id><content type="html">&lt;p&gt;說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式.&lt;/p&gt;
</content><category term="w6"></category><category term="說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式."></category></entry><entry><title>W5</title><link href="./2024-Spring-40971220-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-21T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-03-21:./2024-Spring-40971220-w5-blog-tutorial.html</id><content type="html">&lt;p&gt;使用miktex程式，將老師前幾周上課的影片加上字幕
https://www.youtube.com/watch?v=boyHCAmWpKs&amp;amp;ab_channel=%E5%82%85%E6%9F%8F%E7%9A%93
https://www.youtube.com/watch?v=lQ6iFAeSWJM&amp;amp;ab_channel=%E5%82%85%E6%9F%8F%E7%9A%93&lt;/p&gt;
</content><category term="w5"></category><category term="統整網誌"></category></entry><entry><title>W4</title><link href="./2024-Spring-40971220-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-14T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-03-14:./2024-Spring-40971220-w4-blog-tutorial.html</id><content type="html">&lt;p&gt;使用Latex來與小組成員協同翻譯英文報告。負責段落:第五章&lt;/p&gt;
</content><category term="w4"></category><category term="使用Latex翻譯"></category></entry><entry><title>W3</title><link href="./2024-Spring-40971220-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-07T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-03-07:./2024-Spring-40971220-w3-blog-tutorial.html</id><content type="html">&lt;p&gt;使用Latex來與小組成員協同翻譯英文報告。分配段落&lt;/p&gt;
</content><category term="w3"></category><category term="分配Latex翻譯段落"></category></entry><entry><title>W2</title><link href="./2024-Spring-40971220-w2-blog-tutorial.html" rel="alternate"></link><published>2024-02-29T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-02-29:./2024-Spring-40971220-w2-blog-tutorial.html</id><content type="html">&lt;p&gt;加入小組倉儲並建立子模組&lt;/p&gt;
</content><category term="w2"></category><category term="建立子模組"></category></entry><entry><title>W1</title><link href="./2024-Spring-40971220-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-22T11:00:00+08:00</published><updated>2024-04-12T11:25:55+08:00</updated><author><name>40971220</name></author><id>tag:None,2024-02-22:./2024-Spring-40971220-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="學習網誌編寫"></category></entry></feed>